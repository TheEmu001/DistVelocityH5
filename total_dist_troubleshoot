# Importing the toolbox (takes several seconds)
import warnings

import pandas as pd
from pathlib import Path
import numpy as np
import os
import matplotlib.pyplot as plt
import time_in_each_roi
from scipy import stats


warnings.filterwarnings('ignore')

all_data = pd.DataFrame()
list_no = np.arange(0.0, 108060.0, 1.0) #number of frames in 30 minutes
# list_no = np.arange(0.0, 180000, 1.0) #number of frames in 50 minutes
ms_time = np.arange(0.0, 2670.0, 0.4) #1ms increments of time
# frame rate of camera in those experiments
start_frame = 120 #frame to start at
pick_frame = 30 # pick every __th frame

fps = 60
no_seconds = 30
moving_average_duration_frames = fps * no_seconds
updated_window = no_seconds/(pick_frame/fps)
updated_window = int(updated_window)

DLCscorer = 'DLC_resnet50_BigBinTopSep17shuffle1_250000'

def velocity(video, color, label):

    dataname = str(Path(video).stem) + DLCscorer + '.h5'
    print(dataname)

    #loading output of DLC
    Dataframe = pd.read_hdf(os.path.join(dataname), errors='ignore')
    # Dataframe.reset_index(drop=True)

    #you can read out the header to get body part names!
    bodyparts=Dataframe.columns.get_level_values(1)

    bodyparts2plot=bodyparts

    # let's calculate velocity of the back
    # this can be changed to whatever body part
    bpt='head'
    vel = time_in_each_roi.calc_distance_between_points_in_a_vector_2d(np.vstack([Dataframe[DLCscorer][bpt]['x'].values.flatten(), Dataframe[DLCscorer][bpt]['y'].values.flatten()]).T)

    # raw_x_y_vals_pd_df = pd.DataFrame(columns=['x', 'y'])
    # raw_x_y_vals_pd_df['x'] = Dataframe[DLCscorer][bpt]['x'].values
    # raw_x_y_vals_pd_df['y'] = Dataframe[DLCscorer][bpt]['y'].values
    # every_6th_raw = raw_x_y_vals_pd_df.iloc[start_frame::pick_frame]


    time=np.arange(len(vel))*1./fps #time that is 1/60 sec

    #notice the units of vel are relative pixel distance [per time step]
    vel=vel*(.01667)

    all_data[video + "_dist"] = vel.cumsum()
    all_data[video + "_time"] = time


    plt.plot(all_data[video + "_time"]/60, all_data[video+"_dist"])
if __name__ == '__main__':
    # all_data['time'] = (list_no * (1 / 60)) / 60
    # fig = plt.figure()
    # """
    # Saline
    # """
    velocity(video='Saline_Ai14_OPRK1_C2_F0_Top Down', color='pink', label='F0 Saline')
    velocity(video='Saline_Ai14_OPRK1_C2_F1_Top Down', color='pink', label='F1 Saline')
    velocity(video='Saline_Ai14_OPRK1_C1_F2_Top Down', color='pink', label='F2 Saline')

    velocity(video='Saline_Ai14_OPRK1_C1_M1_Top Down', color='pink', label='M1 Saline')
    velocity(video='Saline_Ai14_OPRK1_C1_M2_Top Down', color='pink', label='M2 Saline')
    velocity(video='Saline_Ai14_OPRK1_C1_M3_Top Down', color='pink', label='M3 Saline')
    velocity(video='Saline_Ai14_OPRK1_C1_M4_Top Down', color='pink', label='M4 Saline')

    saline_avg_dist = all_data.loc[:,
               ['Saline_Ai14_OPRK1_C2_F0_Top Down_dist',
                'Saline_Ai14_OPRK1_C2_F1_Top Down_dist',
                'Saline_Ai14_OPRK1_C1_F2_Top Down_dist',
                'Saline_Ai14_OPRK1_C1_M1_Top Down_dist',
                'Saline_Ai14_OPRK1_C1_M2_Top Down_dist',
                'Saline_Ai14_OPRK1_C1_M3_Top Down_dist',
                'Saline_Ai14_OPRK1_C1_M4_Top Down_dist']]
    all_data['Avg Dist Saline'] = saline_avg_dist.mean(axis=1)
    all_data['Avg Dist Saline SEM'] = stats.sem(saline_avg_dist, axis=1)

    plt.plot(all_data['time'], all_data['Avg Dist Saline'], color='black', linewidth=2,
             label='Saline+Saline')


    plt.fill_between(all_data['time'], all_data["Avg Dist Saline"]-all_data["Avg Dist Saline SEM"],
                     all_data["Avg Dist Saline"]+all_data["Avg Dist Saline SEM"], alpha=0.15, facecolor='black')


    '-----------------------------------------------------------------------------------------------------------'
    """Graph formatting"""
    font = {'family': 'Arial',
            'size': 12}
    plt.rc('font', **font)
    plt.rc('lines', linewidth = 1)
    plt.gca().spines['right'].set_color('none')
    plt.gca().spines['top'].set_color('none')


    plt.xlabel('Time (minutes)', fontsize=12)
    plt.ylabel('Distance', fontsize=12)
    plt.xticks(fontsize=12)
    plt.yticks(fontsize=12)
    plt.title('Total Distance Travelled', fontsize=12)
    # plt.legend(loc='upper left')
    leg = plt.legend(loc='upper left', fontsize=12, frameon=False)
    for i in leg.legendHandles:
        i.set_linewidth(2)
    plt.show()

